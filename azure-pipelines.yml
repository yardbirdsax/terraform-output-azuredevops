# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
- azure-pipelines

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: TerraformInstaller@0
  displayName: Install Terraform
  inputs:
    terraformVersion: '0.12.20'
- task: TerraformTaskV1@0
  displayName: Initialize Terraform
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    backendServiceArm: 'AzureSubscription'
    backendAzureRmResourceGroupName: 'jeftfstate'
    backendAzureRmStorageAccountName: 'jeftfstate'
    backendAzureRmContainerName: 'tfstate'
    backendAzureRmKey: 'tfoutputinado.tfstate'
- task: TerraformTaskV1@0
  displayName: Terraform Apply
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    environmentServiceNameAzureRM: 'AzureSubscription'
- task: Bash@3
  displayName: Convert Terraform output to pipeline variables
  inputs:
    workingDirectory: "./terraform"
    targetType: inline
    script: |
      terraform output -json | ../tf-to-ado.sh
- task: Bash@3
  displayName: "Test TF output in this job"
  env:
    TF_OUTPUT_TEST: $(TF_OUTPUT_TEST)
  inputs:
    targetType: inline
    script: |
      set -e

      test() {
        echo $1
        if [[ "$1" -ne "MyTestValue" ]]
        then
          echo "Value of variable $1 did not match expected value."
          exit 1
        fi
      }
      test "$TF_OUTPUT_TEST"
- task: TerraformTaskV1@0
  displayName: "Destroy resources"
  inputs:
    command: 'destroy'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    environmentServiceNameAzureRM: 'AzureSubscription'

    
